/**
 * Reed-Solomon 테스터 사용 예제
 * 
 * 이 파일은 Reed-Solomon 테스터를 사용하는 방법을 보여줍니다.
 * 실행: npx tsx src/qr-decode/decode/error-correction/test/example-usage.ts
 */

import { 
  testWithArtificialErrors, 
  analyzeAndCorrectErrors, 
  benchmarkReedSolomon,
  printTestResult 
} from './reed-solomon-tester';

// 예제 1: Version 7, Error Level Q 데이터로 인위적 에러 테스트
console.log('=== 예제 1: 인위적 에러 테스트 ===\n');

// 'https://example.com' 인코딩된 데이터 (Version 7Q)
const originalV7Q = [
  0x41,0x06,0x11,0xEC,0x11,0xEC,0x36,0xC6,0xEC,0x11,0xEC,0x11,0x87,0x52,0x11,0xEC,
  0x11,0xEC,0x47,0xE6,0xEC,0x11,0xEC,0x11,0x47,0x36,0x11,0xEC,0x11,0xEC,0x07,0xF6,
  0xEC,0x11,0xEC,0x11,0x33,0xD0,0x11,0xEC,0x11,0xEC,0xA2,0xEC,0xEC,0x11,0xEC,0x11,
  0xF2,0x11,0x11,0xEC,0x11,0xEC,0xF6,0xEC,0xEC,0x11,0xEC,0x11,0x57,0x11,0x11,0xEC,
  0x11,0xEC,0x86,0xEC,0xEC,0x11,0xEC,0x11,0x16,0x11,0x11,0xEC,0x11,0xEC,0xD7,0xEC,
  0xEC,0x11,0xEC,0x11,0x11,0xEC,0x11,0xEC,0x23,0x51,0x08,0x25,0x08,0x25,0xCF,0x46,
  0x7F,0x9C,0x7F,0x9C,0x7F,0x4F,0x3A,0x06,0x3A,0x06,0x0C,0xFB,0xD5,0xEA,0xD5,0xEA,
  0x10,0x2F,0x45,0xC2,0x45,0xC2,0xA6,0x29,0x56,0x08,0x56,0x08,0x6C,0xD1,0xD1,0xC5,
  0xD1,0xC5,0x1F,0x5A,0x22,0x9F,0x22,0x9F,0x52,0xDF,0x04,0xF7,0x04,0xF7,0x60,0x90,
  0xCE,0xD4,0xCE,0xD4,0x4D,0xEB,0x4B,0xA4,0x4B,0xA4,0xCE,0x0D,0xE5,0xBE,0xE5,0xBE,
  0x6D,0xF3,0x52,0x7F,0x52,0x7F,0xE2,0x71,0x75,0xEF,0x75,0xEF,0x7B,0x90,0xF5,0x9D,
  0xF5,0x9D,0xE7,0xBB,0xFD,0xEB,0xFD,0xEB,0x3F,0x52,0xDF,0xD0,0xDF,0xD0,0xB5,0x09,
  0x00,0xDB,0x00,0xDB
];

// 10개 에러 테스트
const result1 = testWithArtificialErrors(originalV7Q, 10, 7, 'Q');
printTestResult(result1);

// 예제 2: 실제 검출 데이터와 비교
console.log('\n\n=== 예제 2: 실제 QR 데이터 에러 분석 ===\n');

// Version 7, Error Level H 원본 데이터
const originalV7H = [
  0x41,0xD7,0x11,0xEC,0x11,0x36,0x06,0xEC,0x11,0xEC,0x87,0xC6,0x11,0xEC,0x11,0x47,
  0x52,0xEC,0x11,0xEC,0x47,0xE6,0x11,0xEC,0x11,0x07,0x36,0xEC,0x11,0xEC,0x33,0xF6,
  0x11,0xEC,0x11,0xA2,0xD0,0xEC,0x11,0xEC,0xF2,0xEC,0x11,0xEC,0x11,0xF6,0x11,0xEC,
  0x11,0xEC,0x57,0xEC,0x11,0xEC,0x11,0x86,0x11,0xEC,0x11,0xEC,0x16,0xEC,0x11,0xEC,
  0x11,0xEC,0x09,0x91,0xB5,0xA2,0xE9,0x11,0x27,0x6C,0x6C,0x37,0xAC,0xEA,0xCA,0x86,
  0xE8,0xBB,0xE5,0xF7,0x12,0x04,0xE2,0xB8,0x7D,0x41,0x12,0x13,0x2E,0x7B,0x1A,0xEF,
  0xAF,0xDC,0x71,0x7F,0x5E,0x83,0x86,0x94,0xD9,0x0C,0xE5,0xF6,0x9C,0x7A,0x91,0x24,
  0x63,0x80,0xF7,0x02,0xEA,0xBE,0xE6,0x2A,0x3E,0x6E,0x0C,0x5F,0x63,0x6E,0xA8,0x3E,
  0x65,0x37,0x7B,0xBD,0x40,0x40,0x16,0xD3,0x98,0x57,0xCE,0x1F,0x4C,0xAF,0x3D,0xB4,
  0xCF,0x61,0x00,0xF6,0x94,0x4F,0xC2,0xE4,0x80,0xDE,0x13,0x8E,0x5A,0x74,0x21,0xE7,
  0x53,0xAA,0x62,0x5A,0x01,0xF1,0x74,0x77,0x4B,0x55,0x99,0x49,0x4D,0x91,0xB9,0x8A,
  0xBE,0x1B,0xE8,0xEC,0x65,0xF7,0x42,0xB5,0x1E,0xC9,0x61,0xA0,0xD8,0x58,0x74,0x11,
  0xBA,0x82,0x82,0x03
];

// 검출된 데이터 (에러 포함)
const detectedV7H = [
  0xCD,0xC8,0x19,0x84,0xD9,0xA6,0x06,0xEC,0x11,0xEC,0x87,0xC6,0x10,0xCF,0x30,0xE2,
  0x10,0x07,0xF3,0xC4,0xE6,0x06,0x11,0xEC,0x11,0x07,0x36,0xEC,0x38,0x4F,0x33,0xC2,
  0xF7,0x84,0x91,0xA2,0xD0,0xEC,0x11,0xEC,0xF2,0xEC,0x11,0xEC,0x11,0xE6,0x18,0x4F,
  0xB8,0x7C,0xEA,0x04,0xD1,0x84,0x11,0x86,0x11,0xEC,0x11,0xEC,0x16,0xEC,0x11,0xEC,
  0x11,0xEC,0x09,0x91,0xA1,0x74,0x5B,0xBF,0xB6,0x24,0x64,0x37,0xAC,0xEA,0xCA,0x86,
  0xE8,0xBB,0xE5,0xF7,0x12,0x04,0xE2,0xB8,0x7D,0x41,0x12,0x13,0x46,0x3D,0x3A,0xEF,
  0xAF,0xDC,0x71,0x7F,0x1E,0x80,0x86,0x94,0xD9,0x0C,0xE5,0xF4,0xBC,0x6A,0x91,0x24,
  0x63,0x80,0xF7,0x02,0xEA,0xBE,0xE6,0x2A,0x3E,0x6E,0x0C,0x5F,0x63,0x6E,0xA8,0x3E,
  0x65,0x37,0x7B,0xBD,0x40,0x40,0x16,0xD3,0x98,0x57,0xCE,0x1F,0x4C,0xAF,0x3D,0xB4,
  0xCF,0x61,0x00,0xF6,0x94,0x4F,0xC2,0xE4,0x80,0xDE,0x13,0x8E,0x5A,0x74,0x21,0xE7,
  0x53,0xAA,0x62,0x5A,0x01,0xF1,0x74,0x77,0x4B,0x55,0x99,0x49,0x4D,0x91,0xB9,0x8A,
  0xBE,0x1B,0xE8,0xEC,0x65,0xF7,0x42,0xB5,0x1E,0xC9,0x61,0xA0,0xD8,0x58,0x74,0x11,
  0xBA,0x82,0x82,0x03
];

const result2 = analyzeAndCorrectErrors(originalV7H, detectedV7H, 7, 'H');
printTestResult(result2);

// 에러 위치 상세 정보 (처음 10개만)
console.log('\n🔍 Error Details (first 10):');
result2.comparison.slice(0, 10).forEach(err => {
  console.log(`Position ${err.position}: 0x${err.original.toString(16).padStart(2, '0')} → 0x${err.detected.toString(16).padStart(2, '0')}`);
});

// 예제 3: 성능 벤치마크
console.log('\n\n=== 예제 3: 성능 벤치마크 ===\n');

const avgTime = benchmarkReedSolomon(detectedV7H, 7, 'H', 100);
console.log(`Average execution time: ${avgTime.toFixed(3)} ms`);
console.log(`Throughput: ${(1000 / avgTime).toFixed(1)} corrections/second`);